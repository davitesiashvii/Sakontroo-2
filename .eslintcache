[{"D:\\sakontrolo-2\\src\\index.js":"1","D:\\sakontrolo-2\\src\\App.js":"2","D:\\sakontrolo-2\\src\\Header.js":"3","D:\\sakontrolo-2\\src\\Posts\\Posts.js":"4","D:\\sakontrolo-2\\src\\PostsData.js":"5","D:\\sakontrolo-2\\src\\CommentsData.js":"6","D:\\sakontrolo-2\\src\\Comments\\Comments.js":"7"},{"size":364,"mtime":1609526297571,"results":"8","hashOfConfig":"9"},{"size":1636,"mtime":1609684218774,"results":"10","hashOfConfig":"9"},{"size":686,"mtime":1609589457223,"results":"11","hashOfConfig":"9"},{"size":572,"mtime":1609610201152,"results":"12","hashOfConfig":"9"},{"size":356,"mtime":1609684205113,"results":"13","hashOfConfig":"9"},{"size":379,"mtime":1609684245344,"results":"14","hashOfConfig":"9"},{"size":574,"mtime":1609610206108,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1evghag",{"filePath":"19","messages":"20","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"D:\\sakontrolo-2\\src\\index.js",[],["35","36"],"D:\\sakontrolo-2\\src\\App.js",["37","38"],"import React from 'react'\nimport Header from './Header'\nimport './App.css';\n//import Posts from './Posts/Posts'\nimport * as db from './PostsData'\nimport * as db1 from './CommentsData'\nimport PostList from './Posts/Posts'\nimport CommentList from './Comments/Comments'\n\n\nclass App extends React.Component{\n  state={\n    posts: null,\n    comments: null,\n    contactForm: false,\n    searchValue:'',\n  }\n\n  componentDidMount(){\n    \n    const data = db.GetPosts()\n    const data1 =db1.GetComments()\n    this.setState({comments: data1})\n    this.setState({posts: data})\n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.searchValue !== this.state.searchValue) {\n      const data = db\n        .GetPosts()\n        .filter((x) =>\n          x.title\n            .toUpperCase()\n            .includes(this.state.searchValue.toUpperCase()) \n        )\n      this.setState({ posts : data })\n    }\n  }\n  getCommentByPost(id){\n    const data = db1.GetComments().filter((x)=> x.postId == id )\n    this.setState({comments : data})\n    this.setState({ contactForm: true })\n  }\n\n  onSearch = (e) => {\n    this.setState({ searchValue: e.target.value })\n  }\n\n\n  render(){\n    return(\n      <>\n        <Header />\n        <Search\n          searchValue={this.state.searchValue}\n          handleSearch={this.onSearch}\n        />\n        {this.state.contactForm ? (\n          <CommentList\n            comments={this.state.comments}\n          />\n        ) : (\n          <PostList\n            posts={this.state.posts}\n            getCommentByPost={this.getCommentByPost}\n          />\n        )}\n       \n      </>\n    )\n\n  }\n}\n\nexport default App;\n","D:\\sakontrolo-2\\src\\Header.js",["39"],"import React from 'react'\r\n\r\nexport default  function Header (props){\r\n   return (\r\n        <nav className=\"navbar fixed-top navbar-expand-lg navbar-dark bg-primary\">\r\n        <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n            <div className=\"navbar-nav\">\r\n            </div>\r\n        </div>\r\n        </nav>\r\n   )\r\n}\r\n","D:\\sakontrolo-2\\src\\Posts\\Posts.js",["40"],"import React, { Component } from 'react'\r\n\r\nclass PostList extends Component {\r\n\r\n  render(){\r\n    return(\r\n      <div className='container'>\r\n        <h4>კონტაქტები</h4>\r\n        <hr />\r\n        <br />\r\n        <div>\r\n          {this.props.posts &&\r\n            this.props.posts.map((post) => (\r\n              <PostListItem\r\n                key={post.id}\r\n                post={post}\r\n                getCommentByPost={this.props.getCommentByPost}\r\n              />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  } \r\n}\r\nexport default PostList","D:\\sakontrolo-2\\src\\PostsData.js",["41"],"import React , { useEffect, useState } from 'react'\r\n\r\nfunction GetPosts() {\r\n  const [posts, setPosts] = useState([])\r\n  \r\n  useEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n      .then((response) => response.json())\r\n      .then((json) => setPosts(json))\r\n  }, [])\r\n    \r\n  return posts;\r\n}\r\n\r\nexport default GetPosts\r\n\r\n\r\n\r\n\r\n","D:\\sakontrolo-2\\src\\CommentsData.js",["42"],"D:\\sakontrolo-2\\src\\Comments\\Comments.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":40,"column":58,"nodeType":"49","messageId":"50","endLine":40,"endColumn":60},{"ruleId":"51","severity":2,"message":"52","line":54,"column":10,"nodeType":"53","endLine":54,"endColumn":16},{"ruleId":"54","severity":1,"message":"55","line":6,"column":9,"nodeType":"56","endLine":6,"endColumn":46},{"ruleId":"51","severity":2,"message":"57","line":14,"column":16,"nodeType":"53","endLine":14,"endColumn":28},{"ruleId":"58","severity":1,"message":"59","line":1,"column":8,"nodeType":"60","messageId":"61","endLine":1,"endColumn":13},{"ruleId":"58","severity":1,"message":"59","line":1,"column":8,"nodeType":"60","messageId":"61","endLine":1,"endColumn":13},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-undef","'Search' is not defined.","JSXIdentifier","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'PostListItem' is not defined.","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]